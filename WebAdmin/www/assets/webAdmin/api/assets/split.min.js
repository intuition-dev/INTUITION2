// mB v5.04.31 on 2019-04-26T20:35:30.115Z
!function(global, factory) {
 'object' == typeof exports && 'undefined' != typeof module ? module.exports = factory() : 'function' == typeof define && define.amd ? define(factory) : global.Split = factory();
}(this, function() {
 'use strict';
 var global = window, document = global.document, addEventListener = 'addEventListener', removeEventListener = 'removeEventListener', getBoundingClientRect = 'getBoundingClientRect', NOOP = function() {
  return !1;
 }, isIE8 = global.attachEvent && !global[addEventListener], calc = [ '', '-webkit-', '-moz-', '-o-' ].filter(function(prefix) {
  var el = document.createElement('div');
  return el.style.cssText = 'width:' + prefix + 'calc(9px)', !!el.style.length;
 }).shift() + 'calc', elementOrSelector = function(el) {
  return 'string' == typeof el || el instanceof String ? document.querySelector(el) : el;
 };
 return function(ids, options) {
  var dimension, clientAxis, position, elements;
  void 0 === options && (options = {});
  var parent = elementOrSelector(ids[0]).parentNode, parentFlexDirection = global.getComputedStyle(parent).flexDirection, sizes = options.sizes || ids.map(function() {
   return 100 / ids.length;
  }), minSize = void 0 !== options.minSize ? options.minSize : 100, minSizes = Array.isArray(minSize) ? minSize : ids.map(function() {
   return minSize;
  }), gutterSize = void 0 !== options.gutterSize ? options.gutterSize : 10, snapOffset = void 0 !== options.snapOffset ? options.snapOffset : 30, direction = options.direction || 'horizontal', cursor = options.cursor || ('horizontal' === direction ? 'ew-resize' : 'ns-resize'), gutter = options.gutter || function(i, gutterDirection) {
   var gut = document.createElement('div');
   return gut.className = 'gutter gutter-' + gutterDirection, gut;
  }, elementStyle = options.elementStyle || function(dim, size, gutSize) {
   var style = {};
   return 'string' == typeof size || size instanceof String ? style[dim] = size : style[dim] = isIE8 ? size + '%' : calc + '(' + size + '% - ' + gutSize + 'px)', 
   style;
  }, gutterStyle = options.gutterStyle || function(dim, gutSize) {
   return (obj = {})[dim] = gutSize + 'px', obj;
   var obj;
  };
  function setElementSize(el, size, gutSize) {
   var style = elementStyle(dimension, size, gutSize);
   Object.keys(style).forEach(function(prop) {
    return el.style[prop] = style[prop];
   });
  }
  function setGutterSize(gutterElement, gutSize) {
   var style = gutterStyle(dimension, gutSize);
   Object.keys(style).forEach(function(prop) {
    return gutterElement.style[prop] = style[prop];
   });
  }
  function adjust(offset) {
   var a = elements[this.a], b = elements[this.b], percentage = a.size + b.size;
   a.size = offset / this.size * percentage, b.size = percentage - offset / this.size * percentage, 
   setElementSize(a.element, a.size, this.aGutterSize), setElementSize(b.element, b.size, this.bGutterSize);
  }
  function drag(e) {
   var offset;
   this.dragging && ((offset = 'touches' in e ? e.touches[0][clientAxis] - this.start : e[clientAxis] - this.start) <= elements[this.a].minSize + snapOffset + this.aGutterSize ? offset = elements[this.a].minSize + this.aGutterSize : offset >= this.size - (elements[this.b].minSize + snapOffset + this.bGutterSize) && (offset = this.size - (elements[this.b].minSize + this.bGutterSize)), 
   adjust.call(this, offset), options.onDrag && options.onDrag());
  }
  function calculateSizes() {
   var a = elements[this.a].element, b = elements[this.b].element;
   this.size = a[getBoundingClientRect]()[dimension] + b[getBoundingClientRect]()[dimension] + this.aGutterSize + this.bGutterSize, 
   this.start = a[getBoundingClientRect]()[position];
  }
  function stopDragging() {
   var a = elements[this.a].element, b = elements[this.b].element;
   this.dragging && options.onDragEnd && options.onDragEnd(), this.dragging = !1, global[removeEventListener]('mouseup', this.stop), 
   global[removeEventListener]('touchend', this.stop), global[removeEventListener]('touchcancel', this.stop), 
   this.parent[removeEventListener]('mousemove', this.move), this.parent[removeEventListener]('touchmove', this.move), 
   delete this.stop, delete this.move, a[removeEventListener]('selectstart', NOOP), 
   a[removeEventListener]('dragstart', NOOP), b[removeEventListener]('selectstart', NOOP), 
   b[removeEventListener]('dragstart', NOOP), a.style.userSelect = '', a.style.webkitUserSelect = '', 
   a.style.MozUserSelect = '', a.style.pointerEvents = '', b.style.userSelect = '', 
   b.style.webkitUserSelect = '', b.style.MozUserSelect = '', b.style.pointerEvents = '', 
   this.gutter.style.cursor = '', this.parent.style.cursor = '';
  }
  function startDragging(e) {
   var a = elements[this.a].element, b = elements[this.b].element;
   !this.dragging && options.onDragStart && options.onDragStart(), e.preventDefault(), 
   this.dragging = !0, this.move = drag.bind(this), this.stop = stopDragging.bind(this), 
   global[addEventListener]('mouseup', this.stop), global[addEventListener]('touchend', this.stop), 
   global[addEventListener]('touchcancel', this.stop), this.parent[addEventListener]('mousemove', this.move), 
   this.parent[addEventListener]('touchmove', this.move), a[addEventListener]('selectstart', NOOP), 
   a[addEventListener]('dragstart', NOOP), b[addEventListener]('selectstart', NOOP), 
   b[addEventListener]('dragstart', NOOP), a.style.userSelect = 'none', a.style.webkitUserSelect = 'none', 
   a.style.MozUserSelect = 'none', a.style.pointerEvents = 'none', b.style.userSelect = 'none', 
   b.style.webkitUserSelect = 'none', b.style.MozUserSelect = 'none', b.style.pointerEvents = 'none', 
   this.gutter.style.cursor = cursor, this.parent.style.cursor = cursor, calculateSizes.call(this);
  }
  'horizontal' === direction ? (dimension = 'width', clientAxis = 'clientX', position = 'left') : 'vertical' === direction && (dimension = 'height', 
  clientAxis = 'clientY', position = 'top');
  var pairs = [];
  function setSizes(newSizes) {
   newSizes.forEach(function(newSize, i) {
    if (i > 0) {
     var pair = pairs[i - 1], a = elements[pair.a], b = elements[pair.b];
     a.size = newSizes[i - 1], b.size = newSize, setElementSize(a.element, a.size, pair.aGutterSize), 
     setElementSize(b.element, b.size, pair.bGutterSize);
    }
   });
  }
  function destroy() {
   pairs.forEach(function(pair) {
    pair.parent.removeChild(pair.gutter), elements[pair.a].element.style[dimension] = '', 
    elements[pair.b].element.style[dimension] = '';
   });
  }
  return elements = ids.map(function(id, i) {
   var pair, element = {
    element: elementOrSelector(id),
    size: sizes[i],
    minSize: minSizes[i]
   };
   if (i > 0 && ((pair = {
    a: i - 1,
    b: i,
    dragging: !1,
    isFirst: 1 === i,
    isLast: i === ids.length - 1,
    direction: direction,
    parent: parent
   }).aGutterSize = gutterSize, pair.bGutterSize = gutterSize, pair.isFirst && (pair.aGutterSize = gutterSize / 2), 
   pair.isLast && (pair.bGutterSize = gutterSize / 2), 'row-reverse' === parentFlexDirection || 'column-reverse' === parentFlexDirection)) {
    var temp = pair.a;
    pair.a = pair.b, pair.b = temp;
   }
   if (!isIE8 && i > 0) {
    var gutterElement = gutter(i, direction);
    setGutterSize(gutterElement, gutterSize), gutterElement[addEventListener]('mousedown', startDragging.bind(pair)), 
    gutterElement[addEventListener]('touchstart', startDragging.bind(pair)), parent.insertBefore(gutterElement, element.element), 
    pair.gutter = gutterElement;
   }
   0 === i || i === ids.length - 1 ? setElementSize(element.element, element.size, gutterSize / 2) : setElementSize(element.element, element.size, gutterSize);
   var computedSize = element.element[getBoundingClientRect]()[dimension];
   return computedSize < element.minSize && (element.minSize = computedSize), i > 0 && pairs.push(pair), 
   element;
  }), isIE8 ? {
   setSizes: setSizes,
   destroy: destroy
  } : {
   setSizes: setSizes,
   getSizes: function getSizes() {
    return elements.map(function(element) {
     return element.size;
    });
   },
   collapse: function collapse(i) {
    if (i === pairs.length) {
     var pair = pairs[i - 1];
     calculateSizes.call(pair), isIE8 || adjust.call(pair, pair.size - pair.bGutterSize);
    } else {
     var pair$1 = pairs[i];
     calculateSizes.call(pair$1), isIE8 || adjust.call(pair$1, pair$1.aGutterSize);
    }
   },
   destroy: destroy
  };
 };
});