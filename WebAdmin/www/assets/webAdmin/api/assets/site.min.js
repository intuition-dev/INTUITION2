// mB v5.04.31 on 2019-04-26T20:35:30.115Z
anchors.options.placement = 'left', anchors.add('h3');
var tocElements = document.getElementById('toc').getElementsByTagName('li');
document.getElementById('filter-input').addEventListener('keyup', function(e) {
 var i, element, children;
 if (13 === e.keyCode) {
  for (i = 0; i < tocElements.length; i++) {
   if (!(element = tocElements[i]).classList.contains('display-none')) {
    return location.replace(element.firstChild.href), e.preventDefault();
   }
  }
 }
 var match = function() {
  return !0;
 }, value = this.value.toLowerCase();
 for (value.match(/^\s*$/) || (match = function(element) {
  var html = element.firstChild.innerHTML;
  return html && -1 !== html.toLowerCase().indexOf(value);
 }), i = 0; i < tocElements.length; i++) {
  element = tocElements[i], children = Array.from(element.getElementsByTagName('li')), 
  match(element) || children.some(match) ? element.classList.remove('display-none') : element.classList.add('display-none');
 }
});
for (var items = document.getElementsByClassName('toggle-sibling'), j = 0; j < items.length; j++) {
 items[j].addEventListener('click', toggleSibling);
}
function toggleSibling() {
 var stepSibling = this.parentNode.getElementsByClassName('toggle-target')[0], icon = this.getElementsByClassName('icon')[0], klass = 'display-none';
 stepSibling.classList.contains(klass) ? (stepSibling.classList.remove(klass), icon.innerHTML = '▾') : (stepSibling.classList.add(klass), 
 icon.innerHTML = '▸');
}
function showHashTarget(targetId) {
 if (targetId) {
  var hashTarget = document.getElementById(targetId);
  hashTarget && 0 === hashTarget.offsetHeight && hashTarget.parentNode.parentNode.classList.contains('display-none') && hashTarget.parentNode.parentNode.classList.remove('display-none');
 }
}
function scrollIntoView(targetId) {
 if (targetId && !history.state) {
  var hashTarget = document.getElementById(targetId);
  hashTarget && hashTarget.scrollIntoView();
 }
}
function gotoCurrentTarget() {
 showHashTarget(location.hash.substring(1)), scrollIntoView(location.hash.substring(1));
}
window.addEventListener('hashchange', gotoCurrentTarget), gotoCurrentTarget();
for (var toclinks = document.getElementsByClassName('pre-open'), k = 0; k < toclinks.length; k++) {
 toclinks[k].addEventListener('mousedown', preOpen, !1);
}
function preOpen() {
 showHashTarget(this.hash.substring(1));
}
var split_left = document.querySelector('#split-left'), split_right = document.querySelector('#split-right'), split_parent = split_left.parentNode, cw_with_sb = split_left.clientWidth;
split_left.style.overflow = 'hidden';
var cw_without_sb = split_left.clientWidth;
function updateState() {
 history.replaceState({
  left_top: split_left.scrollTop,
  right_top: split_right.scrollTop
 }, document.title);
}
function loadState(ev) {
 ev && history.replaceState(ev.state, document.title), history.state && (split_left.scrollTop = history.state.left_top, 
 split_right.scrollTop = history.state.right_top);
}
split_left.style.overflow = '', Split([ '#split-left', '#split-right' ], {
 elementStyle: function(dimension, size, gutterSize) {
  return {
   'flex-basis': 'calc(' + size + '% - ' + gutterSize + 'px)'
  };
 },
 gutterStyle: function(dimension, gutterSize) {
  return {
   'flex-basis': gutterSize + 'px'
  };
 },
 gutterSize: 20,
 sizes: [ 33, 67 ]
}), window.addEventListener('load', function() {
 setTimeout(function() {
  loadState(), updateState(), split_left.addEventListener('scroll', updateState), 
  split_right.addEventListener('scroll', updateState);
 }, 1);
}), window.addEventListener('popstate', loadState);