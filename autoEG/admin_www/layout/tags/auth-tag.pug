auth-tag
	script.
		// Firebase config
		const fconfig = {
			apiKey: 'AIzaSyCU3yQSeCsQ'+'-'+'uIDAl3ooT8LqaVWQAutHMI', // + is to help obfuscate
			authDomain: 'mymeta-host.firebaseapp.com',
			projectId: 'mymeta-host'
		}

		// Meta build server API endpoint
		const baseURL = 'https://appthingsapi.mymeta.host' // TODO: EDIT this and mbake

		const actionCodeSettings = {
			// Domain must be whitelisted in the Firebase Console.
			url: 'https://appthings.mymeta.host/screen/posts/?register', //next step after invite
			// This must be true.
			handleCodeInApp: true
		}

		//window.db1  = window.firebase.firestore()
		//const dsettings = {/* your settings... */ timestampsInSnapshots: true}
		//db1.settings(dsettings)

		// example use ///////////////////////////////////////////////////////////
		/* put in header or better yet in a RIOT tag
		*/
		// in FireBase set:
		// allow read, write: if request.auth.token.email_verified == true ;

		// you should setup your Firestore so only auth user can access:
		// console.log('auth', isUserIn()) // if not, you can gray out the page with a modal

		// RW generic ///////////////////////////////////////////////////////////////////
		window.firebase.initializeApp(fconfig)
		this.impl = firebase.auth()
		this.impl.setPersistence(firebase.auth.Auth.Persistence.LOCAL)

		isLoggedIn(){
			return AdminAuth.isLoggedIn()
		}

		ensureService(){
			if (!window.aSrv && this.isLoggedIn()) {
				window.aSrv = new MetaAdminService(baseURL)
				depp.done('login')
			}
		} 

		register(email, pw, fname, lname) {
			AdminAuth.save(email, pw) //used as flag
			const impl = this.impl
			
			return new Promise(function(resolve, reject) {

				if (!impl.isSignInWithEmailLink(window.location.href)) {
					reject('Not a valid invitation')
				}
				
				//sign-in from registration uses no-password signin (one-time)
				impl.signInWithEmailLink(email, window.location.href)
				.then(function(user) {
					return impl.currentUser.updatePassword(pw)
				}).then(function() {
					return impl.currentUser.updateProfile({displayName: fname + ' ' + lname})
				}).then(function() {
					return impl.currentUser.getIdToken(true) ///* forceRefresh */ true)
				})
				.then(function(idToken) {
					AdminAuth.saveJwt(idToken)
					window.aSrv = new MetaAdminService(baseURL)
					return window.aSrv.getLast() //make a call to verify baseURL works with auth
				})
				.then(function() {
					resolve()
				}).catch(function (error) {
					console.log(error)
					console.log(window.aSrv.getError(error))
					reject(error)
				})
			}) // pro
		}

		login(email, pw) {
			AdminAuth.save(email, pw) //used as flag
			const impl = this.impl
			
			return new Promise(function(resolve, reject) {
				
				impl.signInWithEmailAndPassword(email, pw).then(function(user) {
					//console.log(user) //could take some info here, but its also in auth.impl.currentUser
					return impl.currentUser.getIdToken(false) ///* forceRefresh */ true)
				})
				.then(function(idToken) {
					AdminAuth.saveJwt(idToken)
					window.aSrv = new MetaAdminService(baseURL)
					//return window.aSrv.getLast() //make a call to verify baseURL works with auth
					return window.aSrv.getUser(impl.currentUser.uid)
				})
				.then(function(resp) {
					let user = JSON.parse(resp.data._cmd)
					console.log(user)
					console.log(user['currentRole'])
					AdminAuth.saveCurrentRole(user['currentRole'])
					console.log('currentRole'+user['currentRole'])
					resolve()
				}).catch(function (error) {
					console.log(error)
					console.log(window.aSrv.getError(error))
					reject(error)
				})
			}) // pro
		}
		
		invite(email) {
			const impl = this.impl
			let pw = '!Te456'

			return new Promise(function(resolve, reject) {
				
				impl.createUserWithEmailAndPassword(email, pw)
				.then(function(res) {
					window.aSrv.newUser(res.user.uid, 'Editor');
					impl.signInWithEmailAndPassword(email, pw) //need to do this once so that signin link is allowed
				})
				.then(function() {
					impl.signOut()
				})
				.then(function() {
					impl.sendSignInLinkToEmail(email, actionCodeSettings)
				})
				.then(function() { //reset scope with admin credentials
					impl.signInWithEmailAndPassword(AdminAuth.username(), AdminAuth.secret())
				})
				.then(function() {
					resolve()
				})
				.catch(function(error){
					console.log(error) //show error in .message
					let msg = error
					if (msg=='Error: The email address is already in use by another account.')
						msg = 'This person has already been invited'
					reject(msg)
				})
			}) // pro
		}

		sendPasswordResetEmail(email) {
			return this.impl.sendPasswordResetEmail(email)
		}
		

		logout() {
			AdminAuth.clear() //also deletes window.aSrv
			return this.impl.signOut()
		}

		connectToService(username, code){

			AdminAuth.save(username, code) //set sessionStorage (still used as flag)
			
			this.impl.currentUser.getIdToken(false) ///* forceRefresh */ true)
			.then(function(idToken) {
				console.log(idToken)
				AdminAuth.saveJwt(idToken)
				window.aSrv = connect(baseURL) //No need to send credentials, Firebase uses request/cookie header
				.then(function(user) {
					depp.done('login')
					console.log('connectToService depp.done login')
				})

			}).catch(function(error) {
			 alert(error)
			});

			/*AdminAuth.save(username, code) //set sessionStorage (still used as flag)
			//window.aSrv = new MetaAdminService(baseURL) //No need to send credentials, Firebase uses request/cookie header
			window.aSrv = connect(baseURL) //No need to send credentials, Firebase uses request/cookie header
			.then(function(user) {
				depp.done('login')
				console.log('connectToService depp.done login')
			})*/
		}

		// AUTH //////////////////////////////////////////////////
		function isUserIn() { // use this to check if user is auth and valid
			if(!this.impl || !this.impl.currentUser) return false
			//return this.impl.currentUser.emailVerified
			return true
		}

		this.impl.onAuthStateChanged(function(user_) {
			if (isUserIn()) {
				console.log('CRUDauth', true)
			}
			else {
				console.log('CRUDauth','bye')
			}
		})//auth

		sendEmailVerification() {
			if(!isUserIn()) {
				alert('sending', this.impl.currentUser)
				console.log('sending', this.impl.currentUser)
				this.impl.currentUser.sendEmailVerification()
			}
			else {
				alert('no currentUser')
				console.log('no currentUser')
			}
		}
