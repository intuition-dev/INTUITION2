extends /layout/layout_edit

block main
	script.
		//TODO in edit only: query for item 
		depp.require(['style','ma-client', 'login'], function() {
			console.log('style ready, user is logged in, will get data')
			/*window.aSrv.getItem('my-file').then(function detailRes(resp) {
				data = resp.data._cmd
				depp.done('data')
			})*/
		})

	p
	#edittitlep.container
		.form-group
			input.form-input(name='title', id='title', placeholder='Blog Title')
	p
	#editorp.container
		editor-tag

//- properties panel is in /layout/layout_edit.pug

block script
	script.
		const editor = riot.mount('editor-tag')[0] // mount the first tag
		const tag = riot.mount('medialist-tag')[0] 
		const itag = riot.mount('featuredimage-tag')[0]

		function deleteMedia(filename){
			$('#fx').val('')
			tag.deleteItem(filename)
		}

		depp.require(['style','ma-client'], function () {

			//tag.render() //empty list
			editor.render('## Blog Entry here\n\n\n\n') //default

			$('#title').keyup(function(){
				if(this.value.trim()) {
					$('.save').removeClass('disabled2')
				} else {
					$('.save').addClass('disabled2')
				}
			})

			$('#fx').change(function(){ //upload media
				tag.upload(this.files)
			}) 

			$('.save').click(function(){
				if ($(this).hasClass('disabled2') //validation
					|| editor.text()=='## Blog Entry here'
				) { 
					showError("You haven't written anything yet!")
					return
				}
				itag.read(readDone)
			})// click
		})//require

		function readDone(f1data, f1name) {
			let title = $('#title').val()
			let content = editor.text()
			content.replace('## Blog Entry here', '') //just in case it's left over

			let tags  = $('#tags').val()
			let date_published = moment().toISOString()
			let date1 = $('#date1').val()
			if (date1 != '')
				date_published = moment(date1, 'D MMMM YYYY').toISOString()
			
			let fx = JSON.stringify(tag.items)

			window.aSrv.newItem('blog', title, 'No summary', content, date_published, 
				tags, f1name, f1data, fx
			).then(newItemRes)
			.catch(errorRes)
		}

		function newItemRes(resp) {
			showSuccess('Blog entry saved successfully!', function(){
				window.location.href='/screen/posts'
			})
		}
		function errorRes(resp) {
			showError('Error'+resp.message)
		}

		/*TODO: in edit only
		depp.require('cm','data', function () {
			editor.text(data)
		})//require */

		depp.require('editor', function() {
			editor.text('## Blog Entry here\n\n\n\n') //default
		})

		/*depp.require('style', function () {
			depp.define({'cmjs': [
				'//cdn.jsdelivr.net/npm/codemirror@5.40.2/lib/codemirror.css'
				,'//cdn.jsdelivr.net/npm/codemirror@5.40.2/lib/codemirror.min.js'
				,'//cdn.jsdelivr.net/npm/codemirror@5.40.2/mode/markdown/markdown.js'
			]})
		})//require

		depp.require('cmjs', function () {
			_initCodeMirror()
		})//require


		let myCodeMirror
		function _initCodeMirror() {
			myCodeMirror = CodeMirror.fromTextArea(
				document.querySelector('#cms1') ,
					{
						mode: 'markdown'
						, lineWrapping: true
						, cursorHeight: 0.85
					}
				)
			myCodeMirror.setSize('100%', '100%')
			myCodeMirror.setValue('## Blog Entry here\n\n\n\n')
			depp.done('cm')
		}// initCM() */







