medialist-tag
	style(type='text/css').
		#copy {
			position: absolute;
			left: -9999px;
		}
	#media.card
		.card-body
			<virtual each={items}>
				.tile
					.tile-content
						.flex.edge
							.left
									.card
										.card-title.text-ellipsis {filename}
										.card-subtitle
											a(nohref alt={filename} onclick='{parent.copyToClipboard}')
												.chip Copy Path
							.right
								a(nohref alt={filename} onclick="deleteMedia('{filename}')")
									figure.avatar.avatar-xl.badge(data-badge='X')
										img(src='{src}')
			</virtual>
	textarea#copy(readonly)
	script.
		console.log('medialist-tag')
		this.items = []
		thiz = this
		
		render(data) {// public
			if(!data ) {
				thiz.items = []
				thiz.update()
				return
			}
			let cloned = $.map(data, function (obj) {
				return $.extend(true, {}, obj);
			});
			thiz.items = cloned
			thiz.update()
		}

		copyToClipboard(e) {
			let str = e.item.filename
			$('#copy').val(str)
			$('#copy').select()
			document.execCommand('copy');
		}

		upload(files) {
			//display all images
			if (files){
				let len = files.length
				for (var i = 0; i < len; i++)
				{
					let f = files[i]
					if(!f.type.match('image.*')) continue
					let fname = f.name
					let dup = false, sz = thiz.items.length
					for(j = 0; j < sz; j++) { //no duplicates
						if(thiz.items[j].filename === fname) {dup = true; break}
					}
					if (dup) continue;
					let reader = new FileReader();
					reader.readAsDataURL(f);
					reader.onload = function(e) {
						thiz.items.push({filename: fname, src: e.target.result})
						thiz.update()
					}
				}
			}
		}

		deleteItem(filename) {
			let sz = thiz.items.length
			let clone = []
			for(i = 0; i < sz; i++) {
				var item = thiz.items[i]
				if (item.filename != filename) clone.push(item)
			}
			thiz.items = clone
			thiz.update()
		}


